@page "/employeeedit"
@page "/employeeedit/{EmployeeId}"
@using MyGarage.Shared
@using MyGarage.Blazor.Services
@inject NavigationManager NavigationManager


@if (!Saved)
{
<section class="employee-edit">
    <h1 class="page-title">Details for @Employee.FirstName @Employee.LastName</h1>
    <EditForm Model="@Employee" OnValidSubmit="@HandleValidSubmit"
              OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary></ValidationSummary>

        <div class="form-group row">
            <label for="lastName" class="col-sm-3">Last Name: </label>
            <InputText id="lastName" class="form-control col-sm-8" @bind-Value="@Employee.LastName" placeholder="Enter last name"></InputText>
        </div>

        <div class="form-group row">
            <label for="firstName" class="col-sm-3">First name: </label>
            <InputText id="firstName" class="form-control col-sm-8" @bind-Value="@Employee.FirstName" placeholder="Enter first name"></InputText>
        </div>

        <div class="form-group row">
            <label for="birthdate" class="col-sm-3">Birthdate: </label>
            <InputDate id="birthdate" class="form-control col-sm-8" @bind-Value="@Employee.BirthDate" placeholder="Enter birthdate"></InputDate>
        </div>

        <div class="form-group row">
            <label for="email" class="col-sm-3">Email: </label>
            <InputText id="email" class="form-control col-sm-8" @bind-Value="@Employee.Email" placeholder="Enter email"></InputText>
        </div>

        <div class="form-group row">
            <label for="street" class="col-sm-3">Street: </label>
            <InputText id="street" class="form-control col-sm-8" @bind-Value="@Employee.Street" placeholder="Enter street"></InputText>
        </div>

        <div class="form-group row">
            <label for="zip" class="col-sm-3">Zip code: </label>
            <InputText id="zip" class="form-control col-sm-8" @bind-Value="@Employee.Zip" placeholder="Enter zip code"></InputText>
        </div>

        <div class="form-group row">
            <label for="city" class="col-sm-3">City: </label>
            <InputText id="city" class="form-control col-sm-8" @bind-Value="@Employee.City" placeholder="Enter city"></InputText>
        </div>

        <div class="form-group row">
            <label for="phonenumber" class="col-sm-3">Phone number: </label>
            <InputText id="phonenumber" class="form-control col-sm-8" @bind-Value="@Employee.PhoneNumber" placeholder="Enter phone number"></InputText>
        </div>

        <div class="form-group row">
            <label for="jobcategory" class="col-sm-3">Job category: </label>
            <InputSelect id="jobcategory" class="form-control col-sm-8" @bind-Value="@JobCategoryId">
                @foreach (var jobCategory in JobCategories)
                {
                    <option value="@jobCategory.JobCategoryId">@jobCategory.JobCategoryName</option>
                }
            </InputSelect>
        </div>

        <div class="form-group row">
            <label for="joineddate" class="col-sm-3">Joined on: </label>
            <InputDate id="joineddate" class="form-control col-sm-8" @bind-Value="@Employee.JoinedDate" placeholder="Enter date joined"></InputDate>
        </div>

        <div class="form-group row">
            <label for="exitdate" class="col-sm-3">Left on: </label>
            <InputDate id="exitdate" class="form-control col-sm-8" @bind-Value="@Employee.ExitDate" placeholder="Enter exit date"></InputDate>
        </div>

        <div class="form-group row">
            <label for="comment" class="col-sm-3">Experience: </label>
            <InputTextArea id="comment" class="form-control col-sm-8" @bind-Value="@Employee.Comment" placeholder="Enter comment"></InputTextArea>
        </div>

        <button type="submit" class="btn btn-primary edit-btn">Save</button>

        @if (Employee.EmployeeId > 0)
                {
                    <a class="btn btn-danger" @onclick="@DeleteEmployee">Delete</a>
                }

        <a class="btn btn-outline-primary" @onclick="@NavigateToOverview">Back to overview</a>

    </EditForm>

</section>
}

else
    {
        <div class="alert @StatusClass">@Message</div>
    }

@code {
        [Inject]
        public IEmployeeDataService EmployeeDataService { get; set; }

        [Inject]
        public IJobCategoryDataService JobCategoryDataService { get; set; }

        [Parameter]
        public string EmployeeId { get; set; }

    public Employee Employee { get; set; } = new Employee();

    public List<JobCategory> JobCategories { get; set; } = new List<JobCategory>();

    protected string JobCategoryId = string.Empty;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    protected bool Saved;

    protected async override Task OnInitializedAsync()
    {
        Saved = false;
        JobCategories = (await JobCategoryDataService.GetAllJobCategories()).ToList();

        int.TryParse(EmployeeId, out var employeeId);

        if (employeeId == 0)
        {
            Employee = new Employee { JobCategoryId = 1, BirthDate = DateTime.Now, JoinedDate = DateTime.Now};
        }
        else
        {
            Employee = await EmployeeDataService.GetEmployeeDetails(int.Parse(EmployeeId));
        }

        JobCategoryId = Employee.JobCategoryId.ToString();
    }

    protected async Task HandleValidSubmit()
    {
        Saved = false;
        Employee.JobCategoryId = int.Parse(JobCategoryId);

        if (Employee.EmployeeId == 0)
        {
            var addedEmployee = await EmployeeDataService.AddEmployee(Employee);
            if (addedEmployee != null)
            {
                StatusClass = "alert-success";
                Message = "New employee added";
                Saved = true;
            }
            else
            {
                StatusClass = "alert-danger";
                Message = "Something went wrong";
                Saved = false;
            }
        }
        else
        {
            await EmployeeDataService.UpdateEmployee(Employee);
            StatusClass = "alert-success";
            Message = "Employee updated";
            Saved = true;
        }
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "Validation error";
    }

    protected async Task DeleteEmployee()
    {
        await EmployeeDataService.DeleteEmployee(Employee.EmployeeId);

        StatusClass = "alert-success";
        Message = "Employee deleted";
        Saved = true;
    }

    protected void NavigateToOverview()
    {
        NavigationManager.NavigateTo("/employeeoverview");
    }
}
